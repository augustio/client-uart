# client-uart
This application is designed to work with an ECG sensor patch.
It serves as a client to the server that runs in the sensor patch which,among other things, pushes ECG data to the client every twenty millisecond, and the heart rate delivered through the standard Heart Rate Service.
The ECG data are delivered in a packet with a very simple structure: each packet contains two ECG values and a packet number (0-100), with with a hyphen (-) as the separator. 
The ECG packets are delivered over the custom UART Service by Nordic Semiconductors. 
The sensor patch could also be written to using the same UART Service.
This application also reads battery level characteristic of the Battery Service from the sensor every minute.

#How it works
When the application starts, two buttons: Connect and History are visible to the user.
By pressing the connect button, the user is able to view a list of the BLE devices within range and is able to connect to a selected device.
If the right BLE device is selected and a connection is established, the application would start getting the ECG packets and battery level updates at the above specified intervals.
While connected, the user can either disconnect from the sensor, display sensor data graphically, or record the data to be stored in the android device's internal storage location by pressing corresponding buttons.
The sensor position, heart rate and average heart rate are also displayed along with the ECG graph.
The heart rate values are updated every time they change.
Displaying the sensor data and recording the data could be done simultaneously.
The recording is set to last for two minutes if the user does not stop it by pressing the stop button. 
While recording, a timer is displayed to show the duration of the recording. 
When the recording time elapses, the timer and the graph display are turned off.
Recorded sensor data is stored in the devices internal storage location within a folder, ECGDATA after two minutes of recording or by pressing the stop button. The data is saved in json format. 
The History button is used to display a list of files containing recorded sensor data. Each item in this list is the name of the file where the data is saved and the size of the file. Each file name is in the format sensorName_YYMMddHHmmss.txt and is a link to a details view which is basically a graphical display of a portion of the recorded data. A long press on any of these links would pop up an edit menu to delete the associated file from the record and the phone storage.
On the history_details view, ECG data could be sent either to the cloud service or to a designated email address by pressing the corresponding button.

#Android Device Requirements
Minimum memory size: 2G ?
Minimum Android version: 4.4.4 kitkat. (Works with Version 4.4.2 and 4.4.3 but might have some stability issues)

#Requirement for Building and Installing the application on Linux Platform
-Download and install Java Runtime Environment (JRE) latest version and Java Development Kit (JDK) version 6 or later.
-Download Android stand-alone SDK Tools package for Linux OS from https://developer.android.com/sdk/index.html#Other
-Unbundle the downloaded Linux tar ball into a convinient location.
-Check that the unbundled folder has the folders tools and platform-tools. 
-Add these folders to your executable path.
The stand-alone SDK Tools package does not include a complete Android development environment so 
there are still a couple packages you should add to make your Android SDK complete.
-Open sdk manager with the command: android sdk (contained in the tools/ which has been added to the executable path).
-Add the needed sdk packages following this guide by Android: 
https://developer.android.com/sdk/installing/adding-packages.html
(For the SDK platform, add SDK 5.1.1(API 22), 5.0.1(API 21) and 4.4.2(API 19))

#Build
-On the command line, navigate to the root directory of the application
-Ensure that the Android SDK tools/ directory is included in your PATH environment
-Build the application with the following commands:
$ chmod +x gradlew 
$ ./gradlew assembleDebug
Here the output .apk file is located in app/build/outputs/apk 

#Install
To install the app to a real device:
-enable usb debugging on the android device:
1.Navigate to Settings and check if the 'Developer options' is available, if not then 
navigate to About Phone > scroll to the bottom > tap Build number seven (7) times. 
You'll get a short pop-up in the lower area of your display saying that you're now a developer. 
2. Now access the Developer options menu, check 'USB debugging' and click OK on the prompt.
-Connect the device to the Linux machine and respond to any prompt that pops up
-On the command line, navigate to the root directory of the application
-Ensure that the Android SDK platform-tools/ directory is included in your PATH environment variable and then execute:
$ adb install app/build/outputs/apk/app-debug.apk
If you get an error message saying that the application already exists, then unistall the existing application that has the same application name "ElectriaHRM" from your phone and execute the command again. The application should be installed on your phone.
